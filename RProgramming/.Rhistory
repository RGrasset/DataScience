old.dir <- getwd()
dir.create("testdir")
setwd(/testdir)
setwd(testdir)
setwd("testdir"")
""
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(from = "mytest.R" to="mytest2.R")
file.rename(from = "mytest.R" to ="mytest2.R")
file.rename(from = mytest.R to =mytest2.R)
?file.rename
file.rename("mytest.R" ,"mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder2","folder2")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2/testdir3",recursive=TRUE)
info()
dir.create(file.path('testdir2','testdir3'), recursive =TRUE)
ls
play()
ls()
getwd()
list.files()
nxt()
setwd(old.dir)
bye()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
':'
?':'
seq(1,20)
seq(1,20,by=0.5)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times =
| 40)
rep(0, times =40)
rep(c(0, 1, 2), times = 10)
Try rep(c(0, 1, 2), each = 10)
rep(c(0, 1, 2), each = 10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name<-c(mychar,"Romain")
my_name<-c(my_char,"Romain")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep ="-")
x<-c(44, NA, 5, NA)
x*3
y<-rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[0:10]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,
| 10)]
x[-c(2,
10)]
vect <- c(foo = 11, bar = 2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
data.frame(patients, my_matrix)
my_data<-  data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
class(c(4,TRUE))
x <- list(2, "a", "b", TRUE)
x[[2]]
x[[1]]
class(x[[1]])
1:4+2:3
class(1:4+2:3)
x <- c(3, 5, 1, 10, 12, 6)
x[x%in% 1:5] <-0
x
swirl()
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5=7
! 5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUe(6>4)
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]},c(8, 4, 0))
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[3]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming","is","fun!")
submit()
telegram("LOL")
submit()
mad_libs(name="Romain",adjecive="smart",noun="bicycle" )
submit()
"I"%p%"love"%p%"R!"
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t1
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(1)
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
t3 <-"Octobre 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
bye()
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
x
Sys.time()
Sys.time()$month
as.POSIXlt(Sys.time())$month
months(Sys.date())
months(Sys.time())
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
ls
ls()
rm(ls())
rm(list(ls())
)
?rm
remove(list=ls())
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
3L
x+NULL
x=1
x+NULL
get.environment()
environment()
environment(h)
remove(list=ls())
getwd()
setwd("specdata")
getwd()
setwd( "/Users/Romain/Data/RProgramming")
source(pollutantmean.r)
source(pollutantmean.R)
source("pollutantmean.R"")
""
source("pollutantmean.R")
source("pollutantmean.R")
source("pollutantmean.R")
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
"a"+"b"
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
file
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
paste("specdata","/",1,sep="")
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:9)
pollutantmean("specdata","sulfate",1:9)
name<-paste(specdata,"/00",1,sep="")
name<-paste("specdata"","/00",1,sep="")
name<-paste("specdata","/00",1,sep="")
name
read.csv(name)
getwd()
name<-paste("/specdata","/00",1,sep="")
read.csv(name)
name<-paste("specdata","/00","1.cvs",sep="")
name<-paste("specdata","/00","1.csv",sep="")
read.csv(name)
pollutantmean("specdata","sulfate",1:9)
pollutantmean("specdata","sulfate",1:9)
source(pollutantmean.R)
source("pollutantmean.R"")
source("pollutantmean.R"")
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:9)
name<-paste("/","specdata","/00",1,".csv",sep="")
data<-read.csv(name)
name<-paste("/","specdata","/00",1,".csv",sep="")
name
name<-paste("specdata","/00",1,".csv",sep="")
data<-read.csv(name)
pollutantmean("specdata","sulfate",1:9)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:9)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:9)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:9)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:9)
data
data$sulfate
pollutantmean("specdata","sulfate",1:9)
p<-data$sulfate
mean(p)
mean(p,na.rm=TRUE)
pollutant
data$sulfate
data<-read.csv("specdata/001.csv")
mean(data$sulfate,na.rm=TRUE)
data<-read.csv("specdata/002.csv")
mean(data$sulfate,na.rm=TRUE)
data<-read.csv("specdata/002.csv")
mean(data$sulfate,na.rm=TRUE)
data<-read.csv("specdata/003.csv")
mean(data$sulfate,na.rm=TRUE)
pollutantmean("specdata","sulfate",id=1)
source("pollutantmean.R")
$data[["sulfate"]]
data[["sulfate"]]
source("pollutantmean.R")
pollutantmean("specdata","sulfate",id=1)
pollutantmean("specdata","sulfate",id=1:9)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",id=1:9)
pollutantmean("specdata","sulfate")
pollutantmean("specdata","sulfate",id=1:10)
pollutantmean("specdata","nitrate",id=70:72)
mean(c(NA,NA),rm.na=TRUE)
pollutantmean("specdata","nitrate",id=1)
data<-read.csv("specdata/001.csv")
mean(data$nitrate,na.rm=TRUE)
c(1)+c(1)
numeric(0)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",id=70:72)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",id=70:72)
source("pollutantmean.R")
pollutantmean("specdata","nitrate",id=70:72)
pollutantmean("specdata","nitrate",id=23)
pollutantmean("specdata","sulfate",id=1:10)
remove(ls())
ls()
remove(list=ls())
source("complete.R")
complete("dataspec")
source("complete.R")
complete("dataspec")
source("complete.R")
complete("dataspec")
complete("specdata")
source("complete.R")
complete("specdata")
result
source("complete.R")
complete("specdata")
?nrow
source("complete.R")
complete("specdata",1)
source("complete.R")
complete("specdata",1)
source("complete.R")
complete("specdata",1)
source("complete.R")
complete("specdata",1)
complete("specdata",1)
source("complete.R")
complete("specdata",1)
source("complete.R")
complete("specdata",1)
complete("specdata",1:10)
source("complete.R")
complete("specdata",1:10)
complete("specdata",1)
complete("specdata",c(2,4,8,10,12))
complete("specdata",30:25
)
complete("specdata",3)
source("complete.R")
complete("specdata",3)
source("complete.R")
complete("specdata",3)
source("complete.R")
complete("specdata",3)
?cor
data
source("corr.R")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
cr<-corr("specdata",150)
head(cr)
cr
pollution
complete("specdata",1:312)
source("corr.R")
cr<-corr("specdata",150)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
source("corr.R")
cr<-corr("specdata",150)
source("corr.R")
cr<-corr("specdata",150)
length(cr)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
data<-read.csv("specdata/001.csv")
pollution<-cbind(data[,2],data[,3])
pollution
cor(pollution,use="pairwise.complete.obs")
cor(pollution,use="complete.obs")
cor(data[,2],data[,3],use="pairwise.complete.obs")
source("corr.R")
cr<-corr("specdata",150)
head(cr)
summary(cr)
cr<-corr("specdata",400)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
pollutantmean("specdata","nitrate",70:72)
pollutantmean("specdata","sulfate",34)
pollutantmean("specdata","nitrate")
cc <- complete("specdata", c(6,10,20,34,100,200,310))
print(cc$nobs)
cc <- complete("specdata", 54
)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
source("corr.R")
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
